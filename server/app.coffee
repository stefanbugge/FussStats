express = require('express')
path = require 'path'
passport = require('passport')
GoogleStrategy = require('passport-google-oauth').OAuth2Strategy
session = require('express-session')
cookieParser = require 'cookie-parser'
bodyParser = require 'body-parser'

mongoose = require 'mongoose'
mongoose.connect 'mongodb://localhost/fussstats'

db = mongoose.connection
db.on 'error', console.error.bind console, 'connection error:'
db.once 'open', (callback) ->
  console.log 'YAY'

validateUniqueEmail = (value, callback) ->
  User = mongoose.model('User')
  User.find { $and: [
    { email: value }
    { _id: $ne: @_id }
  ] }, (err, user) ->
    callback err or user.length == 0

# ---
# generated by js2coffee 2.0.1

userSchema = mongoose.Schema(
  name:
    type: String
    required: true
  email:
    type: String
    required: true
    unique: true
    match: [
      /.+\@.+\..+/
      'Please enter a valid email'
    ]
    validate: [
      validateUniqueEmail
      'E-mail address is already in-use'
    ]
  username:
    type: String
    unique: true
    required: true
  roles:
    type: Array
    default: [ 'authenticated' ]
  google: {}
)

User = mongoose.model 'User', userSchema

app = express()

app.use(cookieParser());
app.use(bodyParser.json());
app.use(session(
  resave: true,
  saveUninitialized: true,
  secret: 'uwotm8'
))
app.use(passport.initialize())
app.use(passport.session())


passport.serializeUser (user, done) ->
  done null, user.id

passport.deserializeUser (id, done) ->
  User.findOne { _id: id }, (err, user) ->
    done err, user

app.use(express.static(__dirname + '/public'))

GOOGLE_CLIENT_ID = "610402469663-f2beohjv3944dh8llfeit3t1uf52oklt.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET = "Iwir25tflV5vGDZMrnIVBFT1"

passport.use new GoogleStrategy({
    clientID: GOOGLE_CLIENT_ID
    clientSecret: GOOGLE_CLIENT_SECRET
    callbackURL: 'http://localhost:3000/auth/google/callback'
  }, (accessToken, refreshToken, profile, done) ->

    User.findOne { 'google.id': profile.id }, (err, user) ->
      if user
        console.log 'found user', user
        return done(err, user)
      user = new User(
        name:     profile.displayName
        email:    profile.emails[0].value
        username: profile.emails[0].value
        google:   profile._json
        roles:    [ 'authenticated' ]
      )
      user.save (err) ->
        if err
          console.error err
        console.log 'NEW user', user
        done err, user
)

# Simple route middleware to ensure user is authenticated.
#   Use this route middleware on any resource that needs to be protected.  If
#   the request is authenticated (typically via a persistent login session),
#   the request will proceed.  Otherwise, the user will be redirected to the
#   login page.
ensureAuthenticated = (req, res, next) ->
  console.log 'authenticated', req.isAuthenticated()
  if req.isAuthenticated()
    return next()
  res.redirect '/login'

app.get '/', (req, res) ->
  console.log 'user', req.user
  res.sendFile(path.resolve 'public/index.html')

app.get '/login', (req, res) ->
  res.send 'login', req.user

app.get '/test', ensureAuthenticated, (req, res) ->
  res.send 'test'

app.get '/auth/google', passport.authenticate('google', { scope: ['https://www.googleapis.com/auth/plus.login', 'https://www.googleapis.com/auth/plus.profile.emails.read'] }), (reg, res) ->

app.get '/auth/google/callback', passport.authenticate('google', { failureRedirect: '/login' }), (req, res) ->
  res.redirect('/')

app.get '/logout', (req, res) ->
  req.logout();
  res.redirect('/')

server = app.listen(3000, ->
  host = server.address().address
  port = server.address().port
  console.log 'Example app listening at http://%s:%s', host, port
)

